
import { pauseCampaign } from "../services/scheduler/campaign.actions.js";


export function parseAdverts(responseData, filterStatus = null) {
  const result = [];
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  if (!responseData?.adverts || !Array.isArray(responseData.adverts)) {
    return result;
  }

  // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º filterStatus –≤ —á–∏—Å–ª–æ (–µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω)
  const numericFilterStatus = filterStatus !== null ? Number(filterStatus) : null;

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
  for (const advertGroup of responseData.adverts) {
    const { type, status, advert_list } = advertGroup;
    
    if (!advert_list || !Array.isArray(advert_list)) continue;
    
    // –ë—ã—Å—Ç—Ä–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥—Ä—É–ø–ø—ã (–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è)
    const groupStatus = Number(status);
    if (numericFilterStatus !== null && groupStatus !== numericFilterStatus) continue;

    for (const advert of advert_list) {
      if (!advert.advertId) continue;
      
      result.push({
        advertid: Number(advert.advertId),
        crmtype: Number(type),
        crmstatus: groupStatus, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∂–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        // –î—Ä—É–≥–∏–µ –ø–æ–ª—è...
      });
    }
  }

  // –£–º–Ω–∞—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É –∞–∫—Ç–∏–≤–µ–Ω)
  if (numericFilterStatus === null) {
    result.sort((a, b) => {
      // –°–Ω–∞—á–∞–ª–∞ –ø–æ —Å—Ç–∞—Ç—É—Å—É, –∑–∞—Ç–µ–º –ø–æ —Ç–∏–ø—É (–æ–±–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—é)
      return a.crmstatus - b.crmstatus || a.crmtype - b.crmtype;
    });
  } else {
    // –ü—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–æ —Ç–∏–ø—É
    result.sort((a, b) => a.crmtype - b.crmtype);
  }

  return result;
}

export async function enrichAdvertData(parsedData, getcrmdetailsurl, crmAPIKEY, userId) {
    const enrichedData = parsedData.map(item => ({
      ...item,
      user_id: userId,
      crmname: null,        
      crmsps: null,         
      crmpt: null,         
      pause_time: null,     
      restart_time: null,   
      active: false         
    }));
  
    const batchSize = 50;
    const maxRetries = 2;
    const failedBatches = [];
    
    for (let i = 0; i < enrichedData.length; i += batchSize) {
      const batch = enrichedData.slice(i, i + batchSize);
      const advertIds = batch.map(item => item.advertid);
      const batchNumber = i / batchSize + 1;
      
      let retryCount = 0;
      let lastError = null;
      let success = false;
  
      while (retryCount <= maxRetries && !success) {
        try {
          const response = await axios.post(getcrmdetailsurl, advertIds, {
            headers: { 
              'Authorization': `Bearer ${crmAPIKEY}`,
              'Content-Type': 'application/json',
              'Accept': 'application/json'
            },
            timeout: 30000
          });
  
          const detailsMap = {};
          
          response.data.forEach(detail => {
            detailsMap[detail.advertId] = {
              crmname: detail.name || null,
              crmpt: detail.paymentType || null,
              crmsps: detail.searchPluseState === 'on' ? true : false
            };
          });
          
          batch.forEach(item => {
            const details = detailsMap[item.advertid];
            if (details) {
              item.crmname = details.crmname;
              item.crmpt = details.crmpt;
              item.crmsps = details.crmsps;
            }
          });
          
          success = true;
        } catch (error) {
          lastError = error;
          retryCount++;
          if (retryCount <= maxRetries) {
            console.warn(`Retrying batch ${batchNumber}, attempt ${retryCount}/${maxRetries}`);
            await new Promise(resolve => setTimeout(resolve, 1000 * retryCount));
          }
        }
      }
  
      if (!success) {
        console.error(`Failed to process batch ${batchNumber} after ${maxRetries} retries:`, lastError.message);
        failedBatches.push({
          batchNumber,
          error: lastError
        });
      }
    }
  
    if (failedBatches.length > 0) {
      const errorMessage = `Failed to process ${failedBatches.length} batch(es): ${failedBatches.map(b => b.batchNumber).join(', ')}`;
      console.error(errorMessage);
      throw new Error(errorMessage);
    }
    
    return enrichedData;
}

export async function pausecampaignslist(advertids, crmapikey) {
const results = [];

// –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ—Ü–µ—Å—Å–∞
let message = `üîÑ –ù–∞—á–∞—Ç–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–ª—è ${advertids.length} –∫–∞–º–ø–∞–Ω–∏–π:\n\n`;

for (const id of advertids) {
    try {
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–≥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π –∫–∞–º–ø–∞–Ω–∏–∏
    message += `‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∫–∞–º–ø–∞–Ω–∏—é ${id}...\n`;
    
    const operationResult = await pauseCampaign(id, crmapikey);
    
    results.push({
        id,
        success: operationResult.success,
        status: operationResult.status,
        data: operationResult.data
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ª–æ–≥
    message += operationResult.success 
        ? `‚úÖ –£—Å–ø–µ—Ö: ${operationResult.status}\n\n`
        : `‚ùå –û—à–∏–±–∫–∞: ${operationResult.status}\n\n`;
    
    if (id !== advertids[advertids.length - 1]) {
        await new Promise(resolve => setTimeout(resolve, 1000));
    }
    
    } catch (error) {
    const errorStatus = `–§–∞—Ç–∞–ª—å–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–∞–º–ø–∞–Ω–∏–∏ ${id}: ${error.message}`;
    results.push({
        id,
        success: false,
        error: error.message,
        status: errorStatus
    });
    message += `‚ùå ${errorStatus}\n\n`;
    }
}

// –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
message += '\nüìä –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç:\n';
message += results.map(r => 
    `‚ñ´Ô∏è ${r.id}: ${r.success ? '‚úÖ' : '‚ùå'} ${r.status}`
).join('\n');

message += `\n\n‚úîÔ∏è –£—Å–ø–µ—à–Ω–æ: ${results.filter(r => r.success).length}`;
message += `\n‚úñÔ∏è –û—à–∏–±–∫–∏: ${results.filter(r => !r.success).length}`;
message += `\n–í—Å–µ–≥–æ: ${results.length}`;

return message;
}

